<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nginx吹牛大全</title>
      <link href="/posts/a07be15.html"/>
      <url>/posts/a07be15.html</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx那些事"><a href="#Nginx那些事" class="headerlink" title="Nginx那些事"></a>Nginx那些事</h1><h2 id="1-反向代理"><a href="#1-反向代理" class="headerlink" title="1.反向代理"></a>1.反向代理</h2><p>反向代理<code>Nginx</code>的核心,外部请求统一发送到<code>Nginx</code>服务器 Nginx服务器转发请求到相关的<code>内部服务器</code>,也是负载均衡的<code>基础</code><br>真实的服务器不能直接被外部网络访问，所以需要一台代理服务器，而代理服务器能被外部网络访问的同时又跟真实服务器在同一个网络环境，当然也可能是同一台服务器，端口不同而已。</p><h2 id="2-负载均衡"><a href="#2-负载均衡" class="headerlink" title="2.负载均衡"></a>2.负载均衡</h2><h2 id="3-HTTP服务器（包含动静分离）"><a href="#3-HTTP服务器（包含动静分离）" class="headerlink" title="3.HTTP服务器（包含动静分离）"></a>3.HTTP服务器（包含动静分离）</h2><h2 id="4-正向代理（VPN的原理）"><a href="#4-正向代理（VPN的原理）" class="headerlink" title="4.正向代理（VPN的原理）"></a>4.正向代理（VPN的原理）</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker基础命令</title>
      <link href="/posts/eeb7b753.html"/>
      <url>/posts/eeb7b753.html</url>
      
        <content type="html"><![CDATA[<h2 id="Docker基础命令"><a href="#Docker基础命令" class="headerlink" title="Docker基础命令"></a>Docker基础命令</h2><h2 id="查看docker版本信息"><a href="#查看docker版本信息" class="headerlink" title="查看docker版本信息"></a>查看docker版本信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker --version</span><br></pre></td></tr></table></figure><h2 id="查看docker安装信息"><a href="#查看docker安装信息" class="headerlink" title="查看docker安装信息"></a>查看docker安装信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker info</span><br></pre></td></tr></table></figure><h2 id="查看本机Docker中存在哪些镜像"><a href="#查看本机Docker中存在哪些镜像" class="headerlink" title="查看本机Docker中存在哪些镜像"></a>查看本机Docker中存在哪些镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br></pre></td></tr></table></figure><h2 id="检索images"><a href="#检索images" class="headerlink" title="检索images"></a>检索images</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker search images</span><br></pre></td></tr></table></figure><h2 id="拉取images"><a href="#拉取images" class="headerlink" title="拉取images"></a>拉取images</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull images</span><br></pre></td></tr></table></figure><h2 id="显示一个镜像的历史操作"><a href="#显示一个镜像的历史操作" class="headerlink" title="显示一个镜像的历史操作"></a>显示一个镜像的历史操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">history</span> images</span><br></pre></td></tr></table></figure><h2 id="列出一个容器里面被改变的文件或者目录"><a href="#列出一个容器里面被改变的文件或者目录" class="headerlink" title="列出一个容器里面被改变的文件或者目录"></a>列出一个容器里面被改变的文件或者目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker diff container</span><br></pre></td></tr></table></figure><h2 id="列出当前所有正在运行的容器"><a href="#列出当前所有正在运行的容器" class="headerlink" title="列出当前所有正在运行的容器"></a>列出当前所有正在运行的容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps</span><br></pre></td></tr></table></figure><h2 id="列出所有的容器"><a href="#列出所有的容器" class="headerlink" title="列出所有的容器"></a>列出所有的容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps -a</span><br></pre></td></tr></table></figure><h2 id="列出最近一次启动的容器"><a href="#列出最近一次启动的容器" class="headerlink" title="列出最近一次启动的容器"></a>列出最近一次启动的容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps -f</span><br></pre></td></tr></table></figure><h2 id="查看容器的相关信息"><a href="#查看容器的相关信息" class="headerlink" title="查看容器的相关信息"></a>查看容器的相关信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect <span class="variable">$CONTAINER_ID</span></span><br></pre></td></tr></table></figure><h2 id="显示容器IP地址和端口号，如果输出是空的说明没有配置IP地址（不同的Docker容器可以通过此IP地址互相访问）"><a href="#显示容器IP地址和端口号，如果输出是空的说明没有配置IP地址（不同的Docker容器可以通过此IP地址互相访问）" class="headerlink" title="显示容器IP地址和端口号，如果输出是空的说明没有配置IP地址（不同的Docker容器可以通过此IP地址互相访问）"></a>显示容器IP地址和端口号，如果输出是空的说明没有配置IP地址（不同的Docker容器可以通过此IP地址互相访问）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect --format=&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27; $CONTAINER_ID</span><br></pre></td></tr></table></figure><h2 id="通过容器生成新的镜像"><a href="#通过容器生成新的镜像" class="headerlink" title="通过容器生成新的镜像"></a>通过容器生成新的镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker commit -m <span class="string">&quot;Added ssh from centos&quot;</span> -a <span class="string">&quot;xiaoming&quot;</span> 4a4de4cf223d1 xiaoming/centos:v1</span><br></pre></td></tr></table></figure><p><strong>参数：</strong><br><code>-m</code>参数用来来指定提交的说明信息；<br><code>-a</code>可以指定用户信息的；<br><code>4a4de4cf223d1</code>代表的时容器的id；<br>birdben&#x2F;ubuntu:v1指定目标镜像的用户名、仓库名和 tag 信息。</p><h2 id="构建一个容器"><a href="#构建一个容器" class="headerlink" title="构建一个容器"></a>构建一个容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t=<span class="string">&quot;centos:v1&quot;</span> .</span><br></pre></td></tr></table></figure><h2 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h2><p><code>-t</code>为构建的镜像制定一个标签，便于记忆&#x2F;索引等<br>指定Dockerfile文件在当前目录下，也可以替换为一个具体的<code>Dockerfile</code>的路径。</p><h2 id="在docker中运行centos镜像"><a href="#在docker中运行centos镜像" class="headerlink" title="在docker中运行centos镜像"></a>在docker中运行centos镜像</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run &lt;相关参数&gt; &lt;镜像 ID&gt; &lt;初始命令&gt;</span><br></pre></td></tr></table></figure><h2 id="守护模式启动"><a href="#守护模式启动" class="headerlink" title="守护模式启动"></a>守护模式启动</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it centos:v1</span><br></pre></td></tr></table></figure><h2 id="指定端口号启动"><a href="#指定端口号启动" class="headerlink" title="指定端口号启动"></a>指定端口号启动</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -p 80:80 centos:v1</span><br></pre></td></tr></table></figure><h2 id="指定配置启动"><a href="#指定配置启动" class="headerlink" title="指定配置启动"></a>指定配置启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -d -p 10.211.55.4:9999:22 birdben/ubuntu:v1 <span class="string">&#x27;/usr/sbin/sshd&#x27;</span> -D</span><br></pre></td></tr></table></figure><p>参数：<br><code>-d</code>：表示以“守护模式”执行，日志不会出现在输出终端上。<br><code>-i</code>：表示以“交互模式”运行容器，<code>-i</code> 则让容器的标准输入保持打开<br><code>-t</code>：表示容器启动后会进入其命令行，<code>-t</code> 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上<br><code>-v</code>：表示需要将本地哪个目录挂载到容器中，格式：-v &lt;宿主机目录&gt;:&lt;容器目录&gt;，-v 标记来创建一个数据卷并挂载到容器里。在一次 run 中多次使用可以挂载多个数据卷。<br><code>-p</code>：表示宿主机与容器的端口映射，此时将容器内部的 22 端口映射为宿主机的 9999 端口，这样就向外界暴露了 9999 端口，可通过 Docker 网桥来访问容器内部的 22 端口了。<br>注意：这里使用的是宿主机的 IP 地址：<code>10.211.55.4</code>，与对外暴露的端口号 9999，它映射容器内部的端口号 22。ssh外部需要访问：<code>ssh root@10.211.55.4 -p 9999</code><br>不一定要使用“镜像 ID”，也可以使用“仓库名:标签名”</p><h2 id="start-启动容器"><a href="#start-启动容器" class="headerlink" title="start 启动容器"></a>start 启动容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker start 117843ade696117843ade696</span><br></pre></td></tr></table></figure><h2 id="stop-停止正在运行的容器"><a href="#stop-停止正在运行的容器" class="headerlink" title="stop 停止正在运行的容器"></a>stop 停止正在运行的容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker stop 117843ade696117843ade696</span><br></pre></td></tr></table></figure><h2 id="restart-重启容器"><a href="#restart-重启容器" class="headerlink" title="restart 重启容器"></a>restart 重启容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker restart 117843ade696117843ade696</span><br></pre></td></tr></table></figure><h2 id="rm-删除容器"><a href="#rm-删除容器" class="headerlink" title="rm 删除容器"></a>rm 删除容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">rm</span> 117843ade696117843ade696</span><br></pre></td></tr></table></figure><h2 id="rmi-删除镜像"><a href="#rmi-删除镜像" class="headerlink" title="rmi 删除镜像"></a>rmi 删除镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rmi ed9c93747fe1Deleted</span><br></pre></td></tr></table></figure><h2 id="登录Docker-Hub中心"><a href="#登录Docker-Hub中心" class="headerlink" title="登录Docker Hub中心"></a>登录Docker Hub中心</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker login</span><br></pre></td></tr></table></figure><h2 id="发布上传image（push）"><a href="#发布上传image（push）" class="headerlink" title="发布上传image（push）"></a>发布上传image（push）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker push xiaoming/centos:v1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
